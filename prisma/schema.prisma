// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  layouts       Layout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Custom models for Joe-verlay
model Layout {
  id        String   @id @default(cuid())
  userId    String
  sessionId String   @unique
  name      String   @default("My Layout")

  // Overlay settings
  colorScheme    String   @default("default")
  weatherEffect  String   @default("none")

  // Scene layers visibility
  weatherVisible     Boolean @default(true)
  chatVisible        Boolean @default(true)
  nowPlayingVisible  Boolean @default(true)
  countdownVisible   Boolean @default(true)

  // Component layouts (JSON) - stores position, size, styling for each component
  componentLayouts String? @default("{\"chat\":{\"position\":\"top-left\",\"x\":0,\"y\":80,\"maxWidth\":400},\"nowPlaying\":{\"position\":\"top-left\",\"x\":0,\"y\":0,\"width\":400},\"countdown\":{\"position\":\"top-left\",\"x\":0,\"y\":0,\"scale\":1},\"weather\":{\"density\":1}}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  countdowns CountdownTimer[]
}

model CountdownTimer {
  id          String   @id @default(cuid())
  layoutId    String
  title       String
  description String?
  targetDate  DateTime
  isActive    Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  layout Layout @relation(fields: [layoutId], references: [id], onDelete: Cascade)
}
